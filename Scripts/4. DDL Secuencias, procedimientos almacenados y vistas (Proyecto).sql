
------------------------------------
--********* SECUENCIAS ***********--
------------------------------------

--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_ARTICULO
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_ARTICULO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 78 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_BITACORA
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_BITACORA"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_CARGO
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_CARGO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 12 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_CLIENTE
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_CLIENTE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_EMPLEADO
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_EMPLEADO"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 38 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_FACTURA
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_FACTURA"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_LOTE
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_LOTE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_MARCA
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_MARCA"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 75 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_PLANILLA
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_PLANILLA"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_PROVEEDOR
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_PROVEEDOR"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 13 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_SUCURSAL
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_SUCURSAL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SQ_CODIGO_TIPO_CLIENTE
--------------------------------------------------------

   CREATE SEQUENCE  "FERRETERIA"."SQ_CODIGO_TIPO_CLIENTE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 CACHE 20 NOORDER  NOCYCLE ;

--»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»
   
--------------------------------------------------------------
--********* PROCEDIMIENTOS ALMACENADOS (PARTE 1) ***********--
--------------------------------------------------------------

-- PROCEDIMIENTO ALMACENADO PARA REGISTRAR BITÁCORA DE ACCESOS
CREATE OR REPLACE PROCEDURE SP_REGISTRAR_BITACORA(P_FORM VARCHAR2, P_COD_EMPLEADO INTEGER, P_COD_CARGO INTEGER, P_COD_SUCURSAL INTEGER) AS
BEGIN
  INSERT INTO TBL_BITACORA ("CODIGO BITACORA", FECHA, "NOMBRE DEL FORMULARIO", "CODIGO EMPLEADO", "CODIGO CARGO", "CODIGO SUCURSAL")
  VALUES (SQ_CODIGO_BITACORA.NEXTVAL, SYSDATE, P_FORM, P_COD_EMPLEADO, P_COD_CARGO, P_COD_SUCURSAL);
  COMMIT;
END;

-- PROCEDIMIENTO ALMACENADO PARA REGISTRAR UN NUEVO CLIENTE
CREATE OR REPLACE PROCEDURE SP_REGISTRAR_CLIENTE(P_IDENTIDAD VARCHAR2, P_NOMBRE VARCHAR2, P_TELEFONO INTEGER, P_DIRECCION VARCHAR2, P_RTN VARCHAR2, P_CORREO VARCHAR2, P_COD_TIPO_CLIENTE INTEGER) AS
BEGIN
  INSERT INTO TBL_CLIENTES ("CODIGO CLIENTE", IDENTIDAD, NOMBRE, TELEFONO, DIRECCION, RTN, CORREO, "CODIGO TIPO DE CLIENTE")
  VALUES (SQ_CODIGO_CLIENTE.NEXTVAL, P_IDENTIDAD, P_NOMBRE, P_TELEFONO, P_DIRECCION, P_RTN, P_CORREO, P_COD_TIPO_CLIENTE);
  COMMIT;
END;

-- PAQUETE PARA DEFINIR CURSORES COMO TIPO
CREATE OR REPLACE PACKAGE types AS
  TYPE Cursortype IS REF CURSOR;
END; 

-- PROCEDIMIENTO ALMACENADO PARA BUSCAR UN CLIENTE POR NÚMERO DE IDENTIDAD
CREATE OR REPLACE PROCEDURE SP_BUSCAR_CLIENTE(P_IDENTIDAD VARCHAR2, P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT INITCAP(A.NOMBRE), A.IDENTIDAD, A.RTN, NVL(A.TELEFONO, 0), NVL(LOWER(A.CORREO), '0'), A."CODIGO TIPO DE CLIENTE", NVL(A.DIRECCION, '0'), INITCAP(B.DESCRIPCION)
  FROM TBL_CLIENTES A
  INNER JOIN TBL_TIPO_CLIENTE B
  ON (A."CODIGO TIPO DE CLIENTE" = B."CODIGO TIPO DE CLIENTE")
  WHERE IDENTIDAD = P_IDENTIDAD;
END;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR UN CLIENTE REGISTRADO
CREATE OR REPLACE PROCEDURE SP_MODIFICAR_CLIENTE(P_IDENTIDAD VARCHAR2, P_TELEFONO INTEGER, P_CORREO VARCHAR2, P_DIRECCION VARCHAR2, P_COD_TIPO_CLIENTE INTEGER) AS
BEGIN
  UPDATE TBL_CLIENTES SET TELEFONO = P_TELEFONO, CORREO = P_CORREO, DIRECCION = P_DIRECCION, "CODIGO TIPO DE CLIENTE" = P_COD_TIPO_CLIENTE
  WHERE IDENTIDAD = P_IDENTIDAD;
  COMMIT;
END;

-- PROCEDIMIENTO ALMACENADO PARA OBTENER LOS DATOS DEL USUARIO QUE ACCEDE AL SISTEMA
CREATE OR REPLACE PROCEDURE SP_DATOS_USUARIO(P_USUARIO VARCHAR2, P_CONTRASENIA VARCHAR2, P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT A."CODIGO CARGO",
         A."CODIGO EMPLEADO",
         A."CODIGO SUCURSAL",        
         B.PERMISO_INVENTARIO,
         B.PERMISO_FACTURACION,
         B.PERMISO_REPORTES,
         B.PERMISO_PLANILLA,
         C.NOMBRE,
         D.NOMBRE,
         A.USUARIO,
         A.CONTRASENIA
   FROM (SELECT * 
         FROM TBL_USUARIOS_DEL_SISTEMA
         WHERE USUARIO = P_USUARIO AND CONTRASENIA = P_CONTRASENIA) A
   INNER JOIN TBL_PERMISOS B
   ON (A."CODIGO CARGO" = B."CODIGO CARGO")
   INNER JOIN TBL_EMPLEADOS C
   ON (A."CODIGO EMPLEADO" = C."CODIGO EMPLEADO")
   INNER JOIN TBL_SUCURSALES D
   ON (A."CODIGO SUCURSAL" = D."CODIGO SUCURSAL");
END;

-- PROCEDIMIENTO ALMACENADO PARA GENERAR UNA PLANILLA DE PAGO CON SUS DEDUCCIONES DE LEY
CREATE OR REPLACE PROCEDURE SP_GENERAR_PLANILLA(P_COD_SUCURSAL VARCHAR2, P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT A."CODIGO EMPLEADO" AS "Código empleado", 
         A."CODIGO CARGO" AS "Código cargo",
         A."CODIGO SUCURSAL" AS "Código sucursal",
         A.NOMBRE AS "Nombre",
         A."SUELDO BASE" AS "Sueldo base",
         A."SUELDO BASE"*0.035 AS "IHSS 3.5%" ,
         A."SUELDO BASE"*0.015 AS "RAP/FOSOVI 1.5%",
         A."SUELDO BASE"*0.01 AS "INFOP 1%",
         A."SUELDO BASE"*0 AS "Bonificación"   
  FROM TBL_EMPLEADOS A
  WHERE A."CODIGO SUCURSAL" = P_COD_SUCURSAL; 
END;

-- PROCEDIMIENTO ALMACENADO QUE CREA UN NUEVO REGISTRO DE PLANILLA.
CREATE OR REPLACE PROCEDURE SP_REGISTRAR_PLANILLA(P_COD_EMPLEADO_USUARIO INTEGER, P_COD_CARGO_USUARIO INTEGER, P_COD_SUCURSAL_USUARIO INTEGER) AS
BEGIN
  INSERT INTO TBL_PLANILLAS 
  VALUES (SQ_CODIGO_PLANILLA.NEXTVAL, SYSDATE, P_COD_EMPLEADO_USUARIO, P_COD_CARGO_USUARIO, P_COD_SUCURSAL_USUARIO);
END;

-- PROCEDIMIENTO ALMACENADO PARA GUARDAR LOS DETALLES DE LA PLANILLA AUTOGENERADA.
CREATE OR REPLACE PROCEDURE SP_GUARDAR_DETALLE_PLANILLA(P_COD_PLANILLA INTEGER, P_COD_EMPLEADO INTEGER, P_IHSS VARCHAR2, P_RAP VARCHAR2, P_INFOP VARCHAR2, P_BONIFICACION VARCHAR2, P_SUELDO_NETO VARCHAR2, P_COD_CARGO INTEGER, P_COD_SUCURSAL INTEGER) AS
BEGIN  
  INSERT INTO TBL_DETALLES_DE_PLANILLA 
  VALUES (P_COD_PLANILLA, P_COD_EMPLEADO, TO_NUMBER(P_IHSS), TO_NUMBER(P_RAP), TO_NUMBER(P_INFOP), TO_NUMBER(P_BONIFICACION), TO_NUMBER(P_SUELDO_NETO), P_COD_CARGO, P_COD_SUCURSAL);
END;

-- PROCEDIMIENTO ALMACENADO QUE RETORNA QUIÉN Y CUANDO FUE ELABORADA LA PLANILLA.
CREATE OR REPLACE PROCEDURE SP_DATOS_PLANILLA(P_COD_PLANILLA INTEGER, P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT A.FECHA,
         B.NOMBRE
  FROM TBL_PLANILLAS A
  INNER JOIN TBL_EMPLEADOS B
  ON(A."CODIGO EMPLEADO" = B."CODIGO EMPLEADO")
  WHERE  A."CODIGO PLANILLA" = P_COD_PLANILLA;
END;

-- PROCEDIMIENTO ALMACENADO QUE RETORNA EL DETALLE DE UNA PLANILLA
CREATE OR REPLACE PROCEDURE SP_DETALLE_PLANILLA(P_COD_PLANILLA INTEGER, P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT A."CODIGO EMPLEADO" AS "Código empleado",
         B.NOMBRE AS "Nombre",
         B."SUELDO BASE" AS "Sueldo base",
         A."IHSS",
         A."RAP/FOSOVI",
         A.INFOP,
         A.BONIFICACION AS "Bonificación",
         A."SUELDO NETO" AS "Sueldo neto"
  FROM TBL_DETALLES_DE_PLANILLA A
  INNER JOIN TBL_EMPLEADOS B
  ON(A."CODIGO EMPLEADO" = B."CODIGO EMPLEADO")
  WHERE  A."CODIGO PLANILLA" = P_COD_PLANILLA;
END;

--»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»

--------------------------------
--********* VISTAS ***********--
--------------------------------

--------------------------------------------------------
--  DDL for View VCOMPRA
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "FERRETERIA"."VCOMPRA" ("CODIGO ARTICULO", "CANTIDAD") AS 
  SELECT "CODIGO ARTICULO", SUM("CANTIDAD COMPRADA")As CANTIDAD    FROM TBL_DETALLE_LOTE group by "CODIGO ARTICULO" ORDER BY "CODIGO ARTICULO";

--------------------------------------------------------
--  DDL for View VVENTAS
--------------------------------------------------------

CREATE OR REPLACE FORCE VIEW "FERRETERIA"."VVENTAS" ("CODIGO ARTICULO", "CANTIDAD") AS 
  SELECT "CODIGO ARTICULO", SUM("CANTIDAD ARTICULOS COMPRADOS") AS CANTIDAD    FROM TBL_DETALLE_FACTURA GROUP BY "CODIGO ARTICULO"ORDER BY "CODIGO ARTICULO";

--------------------------------------------------------
--  DDL for View VINVENTARIO
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "FERRETERIA"."VINVENTARIO" ("CODIGO ARTICULO", "CANTIDAD") AS 
  SELECT "CODIGO ARTICULO", CANTIDAD    FROM VCOMPRA    UNION SELECT "CODIGO ARTICULO", (CANTIDAD * -1) AS CANTIDAD    FROM VVENTAS;

--------------------------------------------------------
--  DDL for View GROUPINVENTARIO
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "FERRETERIA"."GROUPINVENTARIO" ("CODIGO ARTICULO", "CANTIDAD") AS 
  SELECT "CODIGO ARTICULO", sum(CANTIDAD) as CANTIDAD    FROM VINVENTARIO GROUP BY "CODIGO ARTICULO";

  --------------------------------------------------------
--  DDL for View VDETALLEINVENTARIO
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "FERRETERIA"."VDETALLEINVENTARIO" ("CODIGO ARTICULO", "DESCRIPCION", "PRECIO UNITARIO DE VENTA", "DIAS DE VIDA UTIL", "MARCA", "CANTIDAD") AS 
  SELECT A."CODIGO ARTICULO", B.DESCRIPCION, B."PRECIO UNITARIO DE VENTA", B."DIAS DE VIDA UTIL",B.MARCA,A.CANTIDAD    FROM GROUPINVENTARIO A LEFT JOIN VDETALLE_PRODUCTO B ON(A."CODIGO ARTICULO" = B."CODIGO ARTICULO")ORDER BY B.DESCRIPCION;

--------------------------------------------------------
--  DDL for View VDETALLE_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "FERRETERIA"."VDETALLE_PRODUCTO" ("CODIGO ARTICULO", "DESCRIPCION", "PRECIO UNITARIO DE VENTA", "DIAS DE VIDA UTIL", "MARCA", "PROVEEDOR") AS 
  select A."CODIGO ARTICULO", A.DESCRIPCION, A."PRECIO UNITARIO DE VENTA", A."DIAS DE VIDA UTIL", B."NOMBRE" AS MARCA ,C.NOMBRE AS PROVEEDOR from TBL_ARTICULOS A LEFT JOIN TBL_MARCAS B ON (A."CODIGO MARCA" = B."CODIGO MARCA" )LEFT JOIN TBL_PROVEEDORES  C ON (A."CODIGO PROVEEDOR" = C."CODIGO PROVEEDOR" )order by A.DESCRIPCION;

--»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»
  
--------------------------------------------------------------
--********* PROCEDIMIENTOS ALMACENADOS (PARTE 2) ***********--
--------------------------------------------------------------

--------------------------------------------------------
--  DDL for Procedure SP_BUSCAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "FERRETERIA"."SP_BUSCAR_CLIENTE" (P_IDENTIDAD VARCHAR2, P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT INITCAP(A.NOMBRE), A.IDENTIDAD, A.RTN, NVL(A.TELEFONO, 0), NVL(LOWER(A.CORREO), '0'), A."CODIGO TIPO DE CLIENTE", NVL(A.DIRECCION, '0'), INITCAP(B.DESCRIPCION)
  FROM TBL_CLIENTES A
  INNER JOIN TBL_TIPO_CLIENTE B
  ON (A."CODIGO TIPO DE CLIENTE" = B."CODIGO TIPO DE CLIENTE")
  WHERE IDENTIDAD = P_IDENTIDAD;
END;

/

--------------------------------------------------------
--  DDL for Procedure SP_BUSCAR_CODIGO_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "FERRETERIA"."SP_BUSCAR_CODIGO_CLIENTE" (P_IDENTIDAD VARCHAR2, P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT "CODIGO CLIENTE"
  FROM TBL_CLIENTES 
  WHERE IDENTIDAD = P_IDENTIDAD;
END;

/

--  --------------------------------------------------------
--  DDL for Procedure SP_DETALLE_INVENTARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "FERRETERIA"."SP_DETALLE_INVENTARIO" (P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT *
  FROM VDETALLEINVENTARIO
  ORDER BY "CODIGO ARTICULO" ASC;
  END;

/

--------------------------------------------------------
--  DDL for Procedure SP_DETALLE_PRODUCTO
--------------------------------------------------------
create or replace PROCEDURE "SP_DETALLE_PRODUCTO" (P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
select A."CODIGO ARTICULO" AS "Código artículo", 
       A.DESCRIPCION AS "Descripción", 
       A."PRECIO UNITARIO DE VENTA" AS "Precio unitario", 
       A."DIAS DE VIDA UTIL" AS "Vida útil", 
       B."NOMBRE" AS "Marca",
       C.NOMBRE AS "Proveedor" 
from TBL_ARTICULOS A
LEFT JOIN TBL_MARCAS B
ON (A."CODIGO MARCA" = B."CODIGO MARCA" )
LEFT JOIN TBL_PROVEEDORES  C
ON (A."CODIGO PROVEEDOR" = C."CODIGO PROVEEDOR" )
ORDER BY A."CODIGO ARTICULO" ASC;
END;

--------------------------------------------------------
--  DDL for Procedure SP_GUARDAR_ARTICULOS_FACTURA
--------------------------------------------------------
set define off;
create or replace PROCEDURE "FERRETERIA"."SP_GUARDAR_ARTICULOS_FACTURA" (CODIGOFA INTEGER, CODIGOSU INTEGER, CANTIDAD INTEGER, PRECIOU INTEGER,SUBT INTEGER, CODIGOART INTEGER) AS
BEGIN  
INSERT INTO TBL_DETALLE_FACTURA VALUES (CANTIDAD,  PRECIOU, SUBT,  CODIGOART, CODIGOFA , CODIGOSU  );
END;

/

--------------------------------------------------------
--  DDL for Procedure SP_GUARDAR_DETALLE_FACTURA
--------------------------------------------------------
create or replace PROCEDURE "SP_GUARDAR_DETALLE_FACTURA" ( CODIGOSU INTEGER, DESCUENTO VARCHAR2, SUBTOTAL VARCHAR2,  IMPUESTOSV VARCHAR2 , TOTAL VARCHAR2, CODIGOEMP INTEGER, CODIGOCARGO INTEGER, CODIGOCLIENTE INTEGER) AS
BEGIN  
  INSERT INTO TBL_FACTURAS
  VALUES (SQ_CODIGO_FACTURA.NEXTVAL, CODIGOSU, SYSDATE, TO_NUMBER(DESCUENTO), TO_NUMBER(SUBTOTAL), TO_NUMBER(IMPUESTOSV), TO_NUMBER(TOTAL), CODIGOEMP, CODIGOCARGO, CODIGOCLIENTE);
END;

--------------------------------------------------------
--  DDL for Procedure SP_GUARDAR_DETALLE_LOTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "FERRETERIA"."SP_GUARDAR_DETALLE_LOTE" ( CODIGOSU INTEGER, CODIGOLO INTEGER, CODIGOART INTEGER, CANTIDAD INTEGER, PRECIOU INTEGER, COSTOACUMULADO INTEGER) AS
BEGIN  
  INSERT INTO TBL_DETALLE_LOTE
  VALUES (CODIGOSU , CODIGOLO, CODIGOART , CANTIDAD, PRECIOU, COSTOACUMULADO);
END;

/

--------------------------------------------------------
--  DDL for Procedure SP_GUARDAR_LOTE
--------------------------------------------------------
create or replace PROCEDURE "SP_GUARDAR_LOTE" ( CODIGOSU INTEGER, IMPUESTOSV VARCHAR2 , TOTAL VARCHAR2 ) AS
BEGIN  
  INSERT INTO TBL_LOTES
  VALUES (SQ_CODIGO_LOTE.NEXTVAL, CODIGOSU, SYSDATE,  TO_NUMBER(IMPUESTOSV), TO_NUMBER(TOTAL));
END;

--------------------------------------------------------
--  DDL for Procedure SP_SELECCIONAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "FERRETERIA"."SP_SELECCIONAR_PRODUCTO" (NEWDESCRIPCION VARCHAR2, P_RESULTADO OUT TYPES.cursorType) AS
BEGIN
  OPEN P_RESULTADO FOR
select A."CODIGO ARTICULO", A.DESCRIPCION, A."PRECIO UNITARIO DE VENTA", A."DIAS DE VIDA UTIL", B."NOMBRE"AS MARCA ,C.NOMBRE AS PROVEEDOR 
from TBL_ARTICULOS A
LEFT JOIN TBL_MARCAS B
ON (A."CODIGO MARCA" = B."CODIGO MARCA" )
LEFT JOIN TBL_PROVEEDORES  C
ON (A."CODIGO PROVEEDOR" = C."CODIGO PROVEEDOR" )
WHERE A.DESCRIPCION = NEWDESCRIPCION;
END;

/

--»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»

--------------------------------------------------------------
--********* PROCEDIMIENTOS ALMACENADOS (PARTE 3) ***********--
--------------------------------------------------------------

--Ingresar INGRESAR ARTÍCULOS NUEVOS EN BODEGA
create or replace PROCEDURE SP_ING_ART_BODEGA( P_CODIGO_SUCURSAL INTEGER, P_CODIGO_ARTICULO INTEGER, P_CANTIDAD_QUE_INGRESA INTEGER) AS 
BEGIN
  INSERT INTO TBL_INVENTARIOS("CODIGO SUCURSAL", "CODIGO ARTICULO", "CANTIDAD EN BODEGA")
  VALUES(P_CODIGO_SUCURSAL, P_CODIGO_ARTICULO, P_CANTIDAD_QUE_INGRESA);
END;

--Ingresar ACTUALIZAR CANTIDAD DE ARTÍCULOS EN LA BODEGA
create or replace PROCEDURE SP_ACT_ART_BODEGA( P_CODIGO_SUCURSAL INTEGER, P_CODIGO_ARTICULO INTEGER, P_CANTIDAD_QUE_INGRESA INTEGER) AS 
  V_CANTIDAD_EN_BODEGA INTEGER;
BEGIN
  SELECT "CANTIDAD EN BODEGA" INTO V_CANTIDAD_EN_BODEGA
  FROM TBL_INVENTARIOS
  WHERE  "CODIGO ARTICULO" = P_CODIGO_ARTICULO AND  "CODIGO SUCURSAL" = P_CODIGO_SUCURSAL;
  UPDATE TBL_INVENTARIOS SET "CANTIDAD EN BODEGA" = (V_CANTIDAD_EN_BODEGA + P_CANTIDAD_QUE_INGRESA)
  WHERE "CODIGO ARTICULO" = P_CODIGO_ARTICULO AND  "CODIGO SUCURSAL" = P_CODIGO_SUCURSAL;
END;

--Procedimiento Almacenado para Modificar Articulos
create or replace PROCEDURE SP_MODIFICAR_ARTICULO(
    P_CODIGO_ARTICULO NUMBER,
    P_DESCRIPCION VARCHAR2,
    P_PRECIO_UNITARIO_DE_VENTA NUMBER,
    P_DIAS_DE_VIDA_UTIL NUMBER,
    P_CODIGO_MARCA NUMBER,
    P_CODIGO_PROVEEDOR NUMBER
)
IS 
BEGIN
    UPDATE TBL_ARTICULOS 
    SET "DESCRIPCION" = P_DESCRIPCION,
        "PRECIO UNITARIO DE VENTA" = P_PRECIO_UNITARIO_DE_VENTA,
        "DIAS DE VIDA UTIL" = P_DIAS_DE_VIDA_UTIL,
        "CODIGO MARCA" = P_CODIGO_MARCA,
        "CODIGO PROVEEDOR" = P_CODIGO_PROVEEDOR
    WHERE "CODIGO ARTICULO" = P_CODIGO_ARTICULO;
    COMMIT;
END;

--Procedimiento Almacenado para Mostrar Articulos
create or replace PROCEDURE SP_MOSTRAR_ARTICULOS
(
	p_ResultSet  OUT  TYPES.cursorType
)
AS
BEGIN 
OPEN p_ResultSet FOR
SELECT "CODIGO ARTICULO",DESCRIPCION, "PRECIO UNITARIO DE VENTA","DIAS DE VIDA UTIL", "CODIGO MARCA","CODIGO PROVEEDOR"
FROM TBL_ARTICULOS
ORDER BY "CODIGO ARTICULO";
END SP_MOSTRAR_ARTICULOS;

--Procedimiento Almacenado para Mostrar Descripcion Articulos
create or replace PROCEDURE SP_MOSTRAR_DES_ARTICULO(
  P_RESULTADO OUT TYPES.cursorType
)
AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT "DESCRIPCION" 
  FROM TBL_ARTICULOS
  ORDER BY "CODIGO ARTICULO";
END SP_MOSTRAR_DES_ARTICULO;

--Procedimiento Almacenado para Mostrar Inventario por Sucursal
create or replace PROCEDURE SP_MOSTRAR_INV_X_SUC(
  P_RESULTADOS OUT TYPES.cursorType,
  P_CODIGO_SUCURSAL IN INTEGER
)
AS
BEGIN
  OPEN P_RESULTADOS FOR
  SELECT A."CODIGO SUCURSAL" AS "CODIGO SUCURSAL",
         A."CODIGO ARTICULO" AS "CODIGO ARTICULO",
         A."CANTIDAD EN BODEGA" AS "CANTIDAD EN BODEGA",         
         B."NOMBRE" AS "NOMBRE",
         C."DESCRIPCION" AS DESCRIPCION,
         C."PRECIO UNITARIO DE VENTA" AS "PRECIO UNITARIO DE VENTA",
         C."DIAS DE VIDA UTIL" AS "DIAS DE VIDA UTIL",
         C."CODIGO MARCA" AS "CODIGO MARCA",
         C."CODIGO PROVEEDOR" AS "CODIGO PROVEEDOR"       
  FROM TBL_INVENTARIOS A
  INNER JOIN TBL_SUCURSALES B
  ON(A."CODIGO SUCURSAL" = B."CODIGO SUCURSAL")
  INNER JOIN TBL_ARTICULOS C
  ON(A."CODIGO ARTICULO" = C."CODIGO ARTICULO")
  WHERE A."CODIGO SUCURSAL" = P_CODIGO_SUCURSAL;  
END SP_MOSTRAR_INV_X_SUC;

--Procedimiento Almacenado para Mostrar Inventario
create or replace PROCEDURE SP_MOSTRAR_INVENTARIO(
  P_RESULTADOS OUT TYPES.cursorType  
)
AS
BEGIN
  OPEN P_RESULTADOS FOR
  SELECT A."CODIGO SUCURSAL" AS "CODIGO SUCURSAL",
         A."CODIGO ARTICULO" AS "CODIGO ARTICULO",         
         B."NOMBRE" AS "NOMBRE SUCURSAL",
         C."DESCRIPCION" AS DESCRIPCION,
         A."CANTIDAD EN BODEGA" AS "CANTIDAD EN BODEGA",
         C."PRECIO UNITARIO DE VENTA" AS "PRECIO UNITARIO DE VENTA",
         C."DIAS DE VIDA UTIL" AS "DIAS DE VIDA UTIL",
         C."CODIGO MARCA" AS "CODIGO MARCA",
         C."CODIGO PROVEEDOR" AS "CODIGO PROVEEDOR"       
  FROM TBL_INVENTARIOS A
  INNER JOIN TBL_SUCURSALES B
  ON(A."CODIGO SUCURSAL" = B."CODIGO SUCURSAL")
  INNER JOIN TBL_ARTICULOS C
  ON(A."CODIGO ARTICULO" = C."CODIGO ARTICULO")
  ORDER BY "CODIGO SUCURSAL";  
END SP_MOSTRAR_INVENTARIO;

--Procedimiento Almacenado para Mostrar Lote por Detalle
create or replace PROCEDURE SP_MOSTRAR_LOTE_X_DET(
  P_RESULTADO OUT TYPES.cursorType,
  P_CODIGO_LOTE IN INTEGER
)
AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT --A."CODIGO LOTE",
         --A."CODIGO SUCURSAL",
         --A."FECHA DE INGRESO",
         --A."IMPUESTO S/V PAGADO",
         --A."COSTO TOTAL",
         B."CODIGO ARTICULO",
         C.DESCRIPCION,
         B."CANTIDAD COMPRADA",
         B."PRECIO UNITARIO DE COMPRA",
         B."COSTO ACUMULADO"
  FROM TBL_DETALLE_LOTE B
  INNER JOIN TBL_ARTICULOS C
  ON(B."CODIGO ARTICULO" = C."CODIGO ARTICULO")
  WHERE B."CODIGO LOTE" = P_CODIGO_LOTE;  
END;

--Procedimiento Almacenado para Mostrar Lotes por Sucursal
create or replace PROCEDURE SP_MOSTRAR_LOTES(
  P_CODIGO_SUCURSAL INTEGER,
  P_RESULTADO OUT TYPES.cursorType
)
AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT "CODIGO LOTE"
  FROM TBL_LOTES
  WHERE  "CODIGO SUCURSAL" = P_CODIGO_SUCURSAL
  ORDER BY "CODIGO LOTE" ASC;
END SP_MOSTRAR_LOTES;

--Procedimiento Almacenado para Mostrar Sucursales--
create or replace PROCEDURE SP_MOSTRAR_SUCURSALES(
  P_RESULTADO OUT TYPES.cursorType
)
AS
BEGIN
  OPEN P_RESULTADO FOR
  SELECT "NOMBRE" 
  FROM TBL_SUCURSALES
  ORDER BY "CODIGO SUCURSAL";
END SP_MOSTRAR_SUCURSALES;

--Procedimiento Almacenado para Registrar Articulos
create or replace PROCEDURE SP_REGISTRO_ARTICULOS(
    P_DESCRIPCION VARCHAR2,
    P_PRECIO_UNITARIO_DE_VENTA VARCHAR2,
    P_DIAS_DE_VIDA_UTIL NUMBER,
    P_CODIGO_MARCA NUMBER,
    P_CODIGO_PROVEEDOR NUMBER
)
IS
BEGIN
    INSERT INTO TBL_ARTICULOS(
        "CODIGO ARTICULO", 
        "DESCRIPCION", 
        "PRECIO UNITARIO DE VENTA",
        "DIAS DE VIDA UTIL",
        "CODIGO MARCA",
        "CODIGO PROVEEDOR"
    )
    VALUES (
        SQ_CODIGO_ARTICULO.NEXTVAL, 
        P_DESCRIPCION,
        TO_NUMBER(P_PRECIO_UNITARIO_DE_VENTA),
        P_DIAS_DE_VIDA_UTIL,
        P_CODIGO_MARCA,
        P_CODIGO_PROVEEDOR
    );
    COMMIT;
END;